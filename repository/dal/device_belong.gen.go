// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bytetrack_server/repository/model"
)

func newDeviceBelong(db *gorm.DB, opts ...gen.DOOption) deviceBelong {
	_deviceBelong := deviceBelong{}

	_deviceBelong.deviceBelongDo.UseDB(db, opts...)
	_deviceBelong.deviceBelongDo.UseModel(&model.DeviceBelong{})

	tableName := _deviceBelong.deviceBelongDo.TableName()
	_deviceBelong.ALL = field.NewAsterisk(tableName)
	_deviceBelong.UserID = field.NewInt32(tableName, "user_id")
	_deviceBelong.DeviceID = field.NewInt32(tableName, "device_id")

	_deviceBelong.fillFieldMap()

	return _deviceBelong
}

type deviceBelong struct {
	deviceBelongDo

	ALL      field.Asterisk
	UserID   field.Int32
	DeviceID field.Int32

	fieldMap map[string]field.Expr
}

func (d deviceBelong) Table(newTableName string) *deviceBelong {
	d.deviceBelongDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d deviceBelong) As(alias string) *deviceBelong {
	d.deviceBelongDo.DO = *(d.deviceBelongDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *deviceBelong) updateTableName(table string) *deviceBelong {
	d.ALL = field.NewAsterisk(table)
	d.UserID = field.NewInt32(table, "user_id")
	d.DeviceID = field.NewInt32(table, "device_id")

	d.fillFieldMap()

	return d
}

func (d *deviceBelong) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *deviceBelong) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 2)
	d.fieldMap["user_id"] = d.UserID
	d.fieldMap["device_id"] = d.DeviceID
}

func (d deviceBelong) clone(db *gorm.DB) deviceBelong {
	d.deviceBelongDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d deviceBelong) replaceDB(db *gorm.DB) deviceBelong {
	d.deviceBelongDo.ReplaceDB(db)
	return d
}

type deviceBelongDo struct{ gen.DO }

func (d deviceBelongDo) Debug() *deviceBelongDo {
	return d.withDO(d.DO.Debug())
}

func (d deviceBelongDo) WithContext(ctx context.Context) *deviceBelongDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deviceBelongDo) ReadDB() *deviceBelongDo {
	return d.Clauses(dbresolver.Read)
}

func (d deviceBelongDo) WriteDB() *deviceBelongDo {
	return d.Clauses(dbresolver.Write)
}

func (d deviceBelongDo) Session(config *gorm.Session) *deviceBelongDo {
	return d.withDO(d.DO.Session(config))
}

func (d deviceBelongDo) Clauses(conds ...clause.Expression) *deviceBelongDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deviceBelongDo) Returning(value interface{}, columns ...string) *deviceBelongDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deviceBelongDo) Not(conds ...gen.Condition) *deviceBelongDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deviceBelongDo) Or(conds ...gen.Condition) *deviceBelongDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deviceBelongDo) Select(conds ...field.Expr) *deviceBelongDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deviceBelongDo) Where(conds ...gen.Condition) *deviceBelongDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deviceBelongDo) Order(conds ...field.Expr) *deviceBelongDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deviceBelongDo) Distinct(cols ...field.Expr) *deviceBelongDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deviceBelongDo) Omit(cols ...field.Expr) *deviceBelongDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deviceBelongDo) Join(table schema.Tabler, on ...field.Expr) *deviceBelongDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deviceBelongDo) LeftJoin(table schema.Tabler, on ...field.Expr) *deviceBelongDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deviceBelongDo) RightJoin(table schema.Tabler, on ...field.Expr) *deviceBelongDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deviceBelongDo) Group(cols ...field.Expr) *deviceBelongDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deviceBelongDo) Having(conds ...gen.Condition) *deviceBelongDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deviceBelongDo) Limit(limit int) *deviceBelongDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deviceBelongDo) Offset(offset int) *deviceBelongDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deviceBelongDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *deviceBelongDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deviceBelongDo) Unscoped() *deviceBelongDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deviceBelongDo) Create(values ...*model.DeviceBelong) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deviceBelongDo) CreateInBatches(values []*model.DeviceBelong, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deviceBelongDo) Save(values ...*model.DeviceBelong) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deviceBelongDo) First() (*model.DeviceBelong, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceBelong), nil
	}
}

func (d deviceBelongDo) Take() (*model.DeviceBelong, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceBelong), nil
	}
}

func (d deviceBelongDo) Last() (*model.DeviceBelong, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceBelong), nil
	}
}

func (d deviceBelongDo) Find() ([]*model.DeviceBelong, error) {
	result, err := d.DO.Find()
	return result.([]*model.DeviceBelong), err
}

func (d deviceBelongDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeviceBelong, err error) {
	buf := make([]*model.DeviceBelong, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deviceBelongDo) FindInBatches(result *[]*model.DeviceBelong, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deviceBelongDo) Attrs(attrs ...field.AssignExpr) *deviceBelongDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deviceBelongDo) Assign(attrs ...field.AssignExpr) *deviceBelongDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deviceBelongDo) Joins(fields ...field.RelationField) *deviceBelongDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deviceBelongDo) Preload(fields ...field.RelationField) *deviceBelongDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deviceBelongDo) FirstOrInit() (*model.DeviceBelong, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceBelong), nil
	}
}

func (d deviceBelongDo) FirstOrCreate() (*model.DeviceBelong, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceBelong), nil
	}
}

func (d deviceBelongDo) FindByPage(offset int, limit int) (result []*model.DeviceBelong, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deviceBelongDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deviceBelongDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deviceBelongDo) Delete(models ...*model.DeviceBelong) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deviceBelongDo) withDO(do gen.Dao) *deviceBelongDo {
	d.DO = *do.(*gen.DO)
	return d
}
